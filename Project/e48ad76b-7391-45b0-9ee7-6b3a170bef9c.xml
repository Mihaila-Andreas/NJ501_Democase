<CodeEditorModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.DeviceHmi.CodeEditor.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><CodingLanguageName>VBNET</CodingLanguageName><HiddenFooter>&#xD;
End Module</HiddenFooter><HiddenHeader>Public Module animation&#xD;
</HiddenHeader><SerialData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">{"c":[]}</SerialData><SerialDeviceHmiId i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">{"c":["{\"t\":\"System.String\",\"a\":\"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\",\"o\":\"aa27db31-a609-4608-8b35-97df99066924\"}","{\"t\":\"System.String\",\"a\":\"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\",\"o\":\"5df033ba-bf76-4b46-bab0-e794a9cb7367\"}"]}</SerialDeviceHmiId><SerialScaleData i:type="a:string" xmlns:a="http://www.w3.org/2001/XMLSchema">{"c":[]}</SerialScaleData><Text>&#xD;
&#xD;
Function StartMoveAnimation(ByVal target As Omron.Hmi.Wec7Interfaces.IElement, ByVal deltaX As Integer, ByVal deltaY As Integer, ByVal duration As Integer, ByVal [in] As Boolean, statusFunction As  Omron.Hmi.SymbolManagement.PrimitiveArray1DSymbol(Of Boolean) ) &#xD;
		If [in] Then&#xD;
            StartMoveAnimation(target, deltaX, deltaY, AddressOf SlideInTransformer, duration, statusFunction )&#xD;
        Else&#xD;
            StartMoveAnimation(target, deltaX, deltaY, AddressOf SlideOutTransformer, duration, statusFunction)&#xD;
        End If&#xD;
 End Function&#xD;
&#xD;
&#xD;
Private Function StartMoveAnimation(element As Omron.Hmi.Wec7Interfaces.IElement, deltaX As Integer, deltaY As Integer, f As System.Func(Of Double, Double), duration As Integer , statusFunction As  Omron.Hmi.SymbolManagement.PrimitiveArray1DSymbol(Of Boolean)   ) &#xD;
			Dim thread As System.Threading.Thread = New System.Threading.Thread(Sub()&#xD;
					statusFunction(0) = True&#xD;
					statusFunction(1) = False&#xD;
					Dim left As Single = element.Left&#xD;
		            Dim top As Single = element.Top&#xD;
		            Dim repeatCount As Integer = duration / 30&#xD;
		            Dim delta As Double = 1.0 / repeatCount&#xD;
		            For i As Integer = 0 To repeatCount - 1&#xD;
		                        If deltaX &lt;&gt; 0 Then&#xD;
		                                   element.Left = left + deltaX * f.Invoke(delta *i)&#xD;
		                        End If&#xD;
		                        If deltaY &lt;&gt; 0 Then&#xD;
		                                   element.Top = top + deltaY * f.Invoke(delta * i)&#xD;
		                        End If&#xD;
		                        System.Threading.Thread.Sleep(30)&#xD;
		            Next&#xD;
		            element.Left = left + deltaX&#xD;
		            element.Top = top + deltaY&#xD;
					statusFunction(0) = False&#xD;
					statusFunction(1) = True&#xD;
			End Sub)&#xD;
            thread.Start()&#xD;
  End Function&#xD;
&#xD;
  &#xD;
     Private Function SlideInTransformer(ByVal delta As Double) As Double&#xD;
        If (delta &lt; 0.0 OrElse delta &gt; 1.0) Then&#xD;
            Throw New ArgumentOutOfRangeException("delta")&#xD;
        End If&#xD;
        Return 1.0 - ((delta - 1.0) * (delta - 1.0))&#xD;
    End Function&#xD;
 &#xD;
	&#xD;
    Private Function SlideOutTransformer(ByVal delta As Double) As Double&#xD;
        If (delta &lt; 0.0 OrElse delta &gt; 1.0) Then&#xD;
            Throw New ArgumentOutOfRangeException("delta")&#xD;
        End If&#xD;
        Return delta * delta&#xD;
    End Function&#xD;
 &#xD;
&#xD;
&#xD;
&#xD;
</Text></CodeEditorModel>