<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>(* OneS Monitoring *)&#xD;
&#xD;
&#xD;
IF Enable and not bInit THEN&#xD;
	&#xD;
				Busy:=TRUE;&#xD;
				bInit:=TRUE;&#xD;
	&#xD;
		(*Operating Time*)&#xD;
	&#xD;
				// Total Drive power On time&#xD;
				ObjectsOneS[0].Object.Index:= 16#4140;&#xD;
				ObjectsOneS[0].Object.Subindex:=16#81 ;&#xD;
				ObjectsOneS[0].Size:= 4 ;&#xD;
&#xD;
				//Motor Operating Time&#xD;
				ObjectsOneS[1].Object.Index:= 16#4140;&#xD;
				ObjectsOneS[1].Object.Subindex:=16#86 ;&#xD;
				ObjectsOneS[1].Size:= 4 ;&#xD;
				&#xD;
				//Capacitor opertion ratio&#xD;
				ObjectsOneS[14].Object.Index:= 16#4140;&#xD;
				ObjectsOneS[14].Object.Subindex:=16#83 ;&#xD;
				ObjectsOneS[14].Size:= 4 ;&#xD;
							&#xD;
&#xD;
		(*Load ratio and inertia *)&#xD;
&#xD;
				//Drive loadRatio&#xD;
				ObjectsOneS[2].Object.Index:= 16#4150;&#xD;
				ObjectsOneS[2].Object.Subindex:=16#82 ;&#xD;
				ObjectsOneS[2].Size:= 4 ;&#xD;
				&#xD;
				//Motor loadRatio&#xD;
				ObjectsOneS[3].Object.Index:= 16#4150;&#xD;
				ObjectsOneS[3].Object.Subindex:=16#83 ;&#xD;
				ObjectsOneS[3].Size:= 4 ;&#xD;
&#xD;
				//Machine Inertia&#xD;
				ObjectsOneS[4].Object.Index:= 16#3001;&#xD;
				ObjectsOneS[4].Object.Subindex:=16#81 ;&#xD;
				ObjectsOneS[4].Size:= 4 ;&#xD;
				&#xD;
				//Regeneration load ratio&#xD;
				ObjectsOneS[15].Object.Index:= 16#4310;&#xD;
				ObjectsOneS[15].Object.Subindex:=16#81 ;&#xD;
				ObjectsOneS[15].Size:= 4 ;&#xD;
				&#xD;
				&#xD;
&#xD;
		(*Temperature*)&#xD;
		&#xD;
				//Servodrive temperature&#xD;
				ObjectsOneS[5].Object.Index:= 16#4320;&#xD;
				ObjectsOneS[5].Object.Subindex:=16#82 ;&#xD;
				ObjectsOneS[5].Size:= 4 ;&#xD;
&#xD;
				//Encoder temperature&#xD;
				ObjectsOneS[6].Object.Index:= 16#4510;&#xD;
				ObjectsOneS[6].Object.Subindex:=16#89 ;&#xD;
				ObjectsOneS[6].Size:= 4 ;&#xD;
&#xD;
	(* Full Alarm Code *)&#xD;
	&#xD;
				//Full alarm code&#xD;
				ObjectsOneS[7].Object.Index:= 16#4000;&#xD;
				ObjectsOneS[7].Object.Subindex:=16#81 ;&#xD;
				ObjectsOneS[7].Size:= 4 ;&#xD;
&#xD;
	(*DC bus *)&#xD;
	&#xD;
				//Main circuit P-N voltage&#xD;
				ObjectsOneS[8].Object.Index:= 16#4320;&#xD;
				ObjectsOneS[8].Object.Subindex:=16#81 ;&#xD;
				ObjectsOneS[8].Size:= 4 ;&#xD;
	&#xD;
	(*Operation and Error Counters*)&#xD;
	&#xD;
				//EtherCAT Status_Error count&#xD;
				ObjectsOneS[9].Object.Index:= 16#4120;&#xD;
				ObjectsOneS[9].Object.Subindex:=16#81 ;&#xD;
				ObjectsOneS[9].Size:= 4 ;&#xD;
				&#xD;
				//Encoder communication error counter&#xD;
				ObjectsOneS[10].Object.Index:= 16#4510;&#xD;
				ObjectsOneS[10].Object.Subindex:=16#86 ;&#xD;
				ObjectsOneS[10].Size:= 4 ;&#xD;
				&#xD;
				//Brake Interlock operation counter&#xD;
				ObjectsOneS[11].Object.Index:= 16#4140;&#xD;
				ObjectsOneS[11].Object.Subindex:=16#87 ;&#xD;
				ObjectsOneS[11].Size:= 4 ;&#xD;
				&#xD;
				//Dynamic Brake  operation counter&#xD;
				ObjectsOneS[12].Object.Index:= 16#4140;&#xD;
				ObjectsOneS[12].Object.Subindex:=16#85 ;&#xD;
				ObjectsOneS[12].Size:= 4 ;&#xD;
				&#xD;
				//Inrush current protection relay operation counter&#xD;
				ObjectsOneS[13].Object.Index:= 16#4140;&#xD;
				ObjectsOneS[13].Object.Subindex:=16#84 ;&#xD;
				ObjectsOneS[13].Size:= 4 ;&#xD;
				&#xD;
				uiMaxIndex:=15;&#xD;
				&#xD;
				uiStage:=10;&#xD;
&#xD;
ELSIF Enable  AND bInit THEN &#xD;
	&#xD;
	CASE uiStage OF &#xD;
		&#xD;
		10:  // Enable&#xD;
			bExecute:=TRUE;&#xD;
			Done:=FALSE;&#xD;
			&#xD;
			IF batchSDO.Done THEN&#xD;
				Data.Drive.TimeInOperation:= TO_REAL(ObjectsOneS[0].Value) / 60.0;&#xD;
				Data.Motor.TimeInOperation:= TO_REAL(ObjectsOneS[1].Value) /60.0;&#xD;
				Data.Drive.LoadRatio:= ObjectsOneS[2].Value;&#xD;
				Data.Motor.LoadRatio:= ObjectsOneS[3].Value;&#xD;
				Data.Drive.InertiaRatio:=ObjectsOneS[4].Value;&#xD;
				Data.Drive.Temperature:=ObjectsOneS[5].Value;&#xD;
				Data.Motor.EncoderTemperature:=(ObjectsOneS[6].Value);&#xD;
				Data.Drive.AlarmCode:=TO_DWORD(ObjectsOneS[7].Value);&#xD;
				Data.Drive.DCbus:=ObjectsOneS[8].Value;&#xD;
				Data.DiagnoseCounters.EtherCATErrors:=ObjectsOneS[9].Value;&#xD;
				Data.DiagnoseCounters.EncoderErrors:=ObjectsOneS[10].Value;&#xD;
				Data.DiagnoseCounters.BrakeInterlock:=ObjectsOneS[11].Value;&#xD;
				Data.DiagnoseCounters.DynamicBrake:=ObjectsOneS[12].Value;&#xD;
				Data.DiagnoseCounters.InrushProtectionRelay:=ObjectsOneS[13].Value;&#xD;
				Data.Drive.CapacitorRatio:=0.1*TO_REAL(ObjectsOneS[14].Value);&#xD;
				Data.Drive.RegenerationRatio:=ObjectsOneS[15].Value;&#xD;
				&#xD;
				Done:=TRUE;&#xD;
				&#xD;
				bExecute:=false;&#xD;
				bTimer:=TRUE;&#xD;
				uiStage:=20 ;&#xD;
				;&#xD;
			ELSIF batchSDO.Error THEN&#xD;
			&#xD;
				uiStage:=9000;&#xD;
				Busy:=FALSE;&#xD;
				Error:=TRUE;&#xD;
				ErrorID:=batchSDO.ErrorID;&#xD;
			&#xD;
			END_IF;&#xD;
			&#xD;
		&#xD;
		20: // Wait ElapsedTime&#xD;
		&#xD;
		&#xD;
			IF tmrTimer.Q THEN&#xD;
				bTimer:=FALSE;&#xD;
				uiStage:=10;&#xD;
			END_IF;&#xD;
			&#xD;
			tmrTimer(In:=bTimer, PT:=UpdateTime);&#xD;
			&#xD;
		&#xD;
	&#xD;
	END_CASE;&#xD;
	&#xD;
ELSIF NOT  Enable  THEN &#xD;
	&#xD;
	bInit:= FALSE	;&#xD;
	bExecute	:=	FALSE;	&#xD;
	uiStage	:=0;	&#xD;
	bTimer	:=FALSE;		&#xD;
	Busy:=FALSE;&#xD;
	Done:=FALSE;&#xD;
	Error:=FALSE;&#xD;
	&#xD;
	&#xD;
END_IF;&#xD;
&#xD;
batchSDO(&#xD;
	Execute:=bExecute,&#xD;
	NodeAddress:=Node ,&#xD;
	ItemNbr:=uiMaxIndex,&#xD;
	Timeout:=TimeOut ,&#xD;
	index=&gt; uiIndex,&#xD;
	&#xD;
	Data:=ObjectsOneS )&#xD;
	;</Text></StructuredTextModel>