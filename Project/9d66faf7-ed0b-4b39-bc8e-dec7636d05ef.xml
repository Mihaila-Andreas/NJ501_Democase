<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>IF Execute=TRUE AND (Done=FALSE OR Busy=FALSE) THEN&#xD;
	busy:=TRUE;&#xD;
	//Capture actual Alarm Extent and last time&#xD;
	index1:=0; AlarmHistoryExtent:=0;&#xD;
	WHILE AlarmHistoryArray[index1].Latched=TRUE and index1&lt;101 DO&#xD;
		index1:=index1+1;&#xD;
	END_WHILE;	&#xD;
	AlarmHistoryExtent:=index1;&#xD;
	IF AlarmHistoryArray[0].AcknowledgedTime&gt;AlarmHistoryArray[0].OccuredTime THEN&#xD;
		AlarmHistoryLastTime:=AlarmHistoryArray[0].AcknowledgedTime;&#xD;
	ELSE&#xD;
		AlarmHistoryLastTime:=AlarmHistoryArray[0].OccuredTime;&#xD;
	END_IF;&#xD;
	&#xD;
	//Sort&#xD;
	i_order:=0; j_order:=0;k_order:=0;&#xD;
	WHILE j_order&lt;NumberOfAllAlarms DO&#xD;
		//Put next latched element in the array&#xD;
		IF AllAlarmArray[j_order].Latched=TRUE THEN&#xD;
			AlarmByTime[i_order]:=j_order; //Pointer in last element of array&#xD;
			IF AllAlarmArray[j_order].AcknowledgedTime&gt;AllAlarmArray[j_order].OccuredTime THEN&#xD;
				NewerTime1:=AllAlarmArray[j_order].AcknowledgedTime;&#xD;
			ELSE&#xD;
				NewerTime1:=AllAlarmArray[j_order].OccuredTime;&#xD;
			END_IF;&#xD;
			//Order array by date (lowest index is latest occurence)&#xD;
			k_order:=i_order;&#xD;
			WHILE k_order&gt;0 DO&#xD;
				//If inserted element is newer, make switch&#xD;
				IF NewerTime1&gt;AllAlarmArray[AlarmByTime[k_order-1]].AcknowledgedTime AND NewerTime1&gt;AllAlarmArray[AlarmByTime[k_order-1]].OccuredTime THEN&#xD;
					k_temp:=AlarmByTime[k_order-1];&#xD;
					AlarmByTime[k_order-1]:=AlarmByTime[k_order];&#xD;
					AlarmByTime[k_order]:=k_temp;&#xD;
					k_order:=k_order-1;&#xD;
				//Otherwise, stop comparison&#xD;
				ELSE&#xD;
					k_order:=0;&#xD;
				END_IF;&#xD;
			END_WHILE;&#xD;
			i_order:=i_order+1; //New alarm inserted (and ordered)&#xD;
		END_IF;&#xD;
		j_order:=j_order+1; //Check next alarm&#xD;
	END_WHILE;&#xD;
	&#xD;
	index1:=0;&#xD;
	//Check how many new alarms are updated (Index1)&#xD;
	WHILE AlarmHistoryLastTime&lt;AllAlarmArray[AlarmByTime[index1]].AcknowledgedTime OR AlarmHistoryLastTime&lt;AllAlarmArray[AlarmByTime[index1]].OccuredTime DO&#xD;
		index1:=index1+1;&#xD;
	END_WHILE;&#xD;
	//Shift down AlarmHistoryArray&#xD;
	index2:=AlarmHistoryExtent;&#xD;
	WHILE index2&gt;0 DO&#xD;
		IF index1+index2&lt;=100 THEN&#xD;
			AlarmHistoryArray[index1+index2-1]:=AlarmHistoryArray[index2-1];&#xD;
		END_IF;&#xD;
		index2:=index2-1;&#xD;
	END_WHILE;&#xD;
	//Copy new alarms&#xD;
	index2:=0;&#xD;
	WHILE index2&lt;index1 DO&#xD;
		AlarmHistoryArray[index2]:=AllAlarmArray[AlarmByTime[index2]];&#xD;
		index2:=index2+1;&#xD;
	END_WHILE;&#xD;
	&#xD;
	//Update Alarm Extent and last time&#xD;
	AlarmHistoryExtent:=AlarmHistoryExtent+index1;&#xD;
	IF AlarmHistoryExtent&gt;101 THEN AlarmHistoryExtent:=101; END_IF;&#xD;
	IF AlarmHistoryArray[0].AcknowledgedTime&gt;AlarmHistoryArray[0].OccuredTime THEN&#xD;
		AlarmHistoryLastTime:=AlarmHistoryArray[0].AcknowledgedTime;&#xD;
	ELSE&#xD;
		AlarmHistoryLastTime:=AlarmHistoryArray[0].OccuredTime;&#xD;
	END_IF;&#xD;
	&#xD;
	//Done &amp; Busy&#xD;
	Done:=TRUE;&#xD;
	Busy:=FALSE;&#xD;
END_IF;&#xD;
&#xD;
IF Execute=FALSE THEN&#xD;
	Done:=FALSE;&#xD;
	Busy:=FALSE;&#xD;
END_IF;&#xD;
&#xD;
		&#xD;
	&#xD;
			&#xD;
		&#xD;
	</Text></StructuredTextModel>